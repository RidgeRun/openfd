#!/usr/bin/env python
# ==========================================================================
#
# Copyright (C) 2012-2013 RidgeRun, LLC (http://www.ridgerun.com)
# All Rights Reserved.
#
# Authors: Jose Pablo Carballo <jose.carballo@ridgerun.com>
#          Diego Benavides <diego.benavides@ridgerun.com>
#
# The contents of this software are proprietary and confidential to RidgeRun,
# LLC.  No part of this program may be photocopied, reproduced or translated
# into another programming language without prior written consent of 
# RidgeRun, LLC.
#
# The installer tool objective is to provide several ways to deploy the
# firmware to the target board. 
#
# ==========================================================================

"""
Main entry point for the installer.

Please refer to the **User's Guide** for detailed information on how to call
this installer.
"""

# ==========================================================================
# Imports
# ==========================================================================

import time
import os
import sys
import argparse
import serial
import signal
import logging

import openfd.utils as utils
from openfd.utils.args import ArgCheckerError
from openfd.boards import BoardFactory
from openfd.methods.board import BoardArgs
from openfd.methods.board import Uboot
from openfd.methods.board import UbootTimeoutException
from openfd.methods.board import TftpRamLoader
from openfd.methods.board import RamLoaderException
from openfd.methods.board import NandInstaller
from openfd.methods.board import NandExternalInstaller
from openfd.methods.board import EnvInstaller
from openfd.methods.sdcard import SdCardArgs
from openfd.methods.sdcard import ComponentInstaller
from openfd.methods.sdcard import SDCardInstaller

# ==========================================================================
# Global variables
# ==========================================================================

_logger  = None

# ==========================================================================
# Constants
# ==========================================================================

# Modes
MODE_SD = 'sd'
MODE_SD_IMG = 'sd-img'
MODE_SD_SCRIPT = 'sd-script'
MODE_NAND = 'nand'
MODE_RAM = 'ram'
MODE_ENV = 'env'

# Components
COMP_IPL = "ipl"
COMP_BOOTLOADER = "bootloader"
COMP_KERNEL = "kernel"
COMP_FS = "fs"

# ==========================================================================
# Functions
# ==========================================================================

def _init_logging(args):
    global _logger
    _program_name = os.path.basename(sys.argv[0])
    _logger = utils.logger.init_global_logger(_program_name)
    _logger.setLevel(logging.DEBUG)
    streamhandler = logging.StreamHandler()
    streamhandler.setFormatter(logging.Formatter('%(msg)s'))
    if args.verbose:
        streamhandler.setLevel(logging.DEBUG)
    else:
        streamhandler.setLevel(logging.INFO)
    if args.quiet:
        streamhandler.setLevel(logging.CRITICAL)
    _logger.addHandler(streamhandler)
    if args.log_filename:
        filehandler = logging.FileHandler(args.log_filename, mode='a')
        filehandler.setLevel(logging.DEBUG)
        if args.verbose:
            filehandler.setFormatter(logging.Formatter('%(levelname)s:'
                                           '%(filename)s:%(lineno)s: %(msg)s'))
        else:
            filehandler.setFormatter(logging.Formatter('%(msg)s'))
        _logger.addHandler(filehandler)
        _logger.debug('-' * 80)
        _logger.debug('Log date: %s' % time.strftime("%Y%m%d %H:%M:%S"))
        command = ''
        for arg in sys.argv:
            if ' ' in arg:
                command += ' "%s"' % arg
            else:
                command += ' %s' % arg
        _logger.debug('Command: %s' % command)

def _init_executer(args):
    utils.executer.init_global_executer(dryrun=args.dryrun,
                                    enable_colors=True, verbose=args.verbose)

def _clean_exit(code=0):
    if code != 0: _logger.debug('Exiting with code %d' % code)
    exit(code)

def _abort_install():
    _logger.error('Installation aborted')
    _clean_exit(-1)

def _sigint_handler(signal, frame):
    _logger.error('\nInstallation interrupted')
    _clean_exit(0)

def _setup_uboot(args):
    uboot = Uboot()
    uboot.serial_logger = _logger
    uboot.dryrun = args.dryrun
    try:
        ret = uboot.open_comm(port=args.serial_port, baud=args.serial_baud)
        if ret is False: _abort_install()
        ret = uboot.sync()
        if ret is False: _abort_install()
    except (serial.SerialException, UbootTimeoutException) as e:
        uboot.close_comm()
        _logger.error(e)
        _abort_install()
    return uboot

def _get_args():
    parser = argparse.ArgumentParser()
    board_args = BoardArgs()
    sd_args = SdCardArgs()
    subparsers = parser.add_subparsers(help="installation mode (--help available)",
                                         dest="mode")
    
    parser.add_argument('-y', '--assume-yes',
                       help='Automatic \'yes\' to prompts; '
                       'runs non-interactively',
                       dest='interactive',
                       action='store_false',
                       default=True)
    
    parser.add_argument('-v', '--verbose',
                       help='Enable debug',
                       dest='verbose',
                       action='store_true',
                       default=False)
    
    parser.add_argument('-q', '--quiet',
                       help='Be as quiet as possible',
                       dest='quiet',
                       action='store_true',
                       default=False)
    
    parser.add_argument('-l', '--log',
                       help="Log to file",
                       metavar='<file>',
                       dest='log_filename')
    
    parser.add_argument('--dryrun',
                       help='Sets the dryrun mode On (system and uboot '
                            'commands will be logged, but not executed)',
                       dest='dryrun',
                       action='store_true',
                       default=False)
    
    parser_sd = subparsers.add_parser(MODE_SD)
    parser_sd_img = subparsers.add_parser(MODE_SD_IMG)
    parser_sd_script = subparsers.add_parser(MODE_SD_SCRIPT)
    parser_ram = subparsers.add_parser(MODE_RAM)
    parser_env = subparsers.add_parser(MODE_ENV)
    parser_nand = subparsers.add_parser(MODE_NAND)
    
    subparsers_nand = parser_nand.add_subparsers(help="component "
                                       "(--help available)", dest="component")
    parser_nand_ipl = subparsers_nand.add_parser(COMP_IPL,
                                       help="Initial Program Loader (UBL)")
    parser_nand_bootloader = subparsers_nand.add_parser(COMP_BOOTLOADER,
                                                  help="Bootloader (U-Boot)")
    parser_nand_kernel = subparsers_nand.add_parser(COMP_KERNEL, help="Kernel")
    parser_nand_fs = subparsers_nand.add_parser(COMP_FS, help="Filesystem")
    
    sd_args.add_args_sd(parser_sd)
    sd_args.add_args_sd_img(parser_sd_img)
    sd_args.add_args_sd_script(parser_sd_script)
    board_args.add_args_nand(parser_nand)
    board_args.add_args_nand_ipl(parser_nand_ipl)
    board_args.add_args_nand_bootloader(parser_nand_bootloader)
    board_args.add_args_nand_kernel(parser_nand_kernel)
    board_args.add_args_nand_fs(parser_nand_fs)
    board_args.add_args_ram(parser_ram)
    board_args.add_args_env(parser_env)
    
    return parser.parse_args()
    
def _check_args(args):
    board_args = BoardArgs()
    sd_args = SdCardArgs()
    try:
        if args.mode == MODE_SD:
            sd_args.check_args_sd(args)
        elif args.mode == MODE_SD_IMG:
            sd_args.check_args_sd_img(args)
        elif args.mode == MODE_SD_SCRIPT:
            sd_args.check_args_sd_script(args)
        elif args.mode == MODE_NAND:
            board_args.check_args_nand(args)
        elif args.mode == MODE_RAM:
            board_args.check_args_ram(args)
        elif args.mode == MODE_ENV:
            board_args.check_args_env(args)        
    except ArgCheckerError as e:
        _logger.error(e)
        _abort_install()

def _check_sudo():
    ret = utils.get_global_executer().prompt_sudo()
    if ret != 0:
        _logger.error("Failed obtaining superuser access via sudo")
        _clean_exit(-1)

# ==========================================================================
# Installation modes
# ==========================================================================

def _get_comp_installer(args):
    comp_installer = ComponentInstaller()
    comp_installer.uflash_bin = args.uflash_bin
    comp_installer.ubl_file = args.ubl_file
    comp_installer.uboot_file = args.uboot_file
    comp_installer.uboot_entry_addr = args.uboot_entry_addr
    comp_installer.uboot_load_addr = args.uboot_load_addr
    comp_installer.bootargs = args.uboot_bootargs
    comp_installer.kernel_image = args.kernel_file
    comp_installer.rootfs = args.rootfs
    comp_installer.workdir = args.workdir
    return comp_installer

def _get_tftp_loader(args, uboot):
    tftp_loader = TftpRamLoader(uboot, args.board_net_mode)
    tftp_loader.dir = args.tftp_dir
    tftp_loader.port = args.tftp_port
    tftp_loader.host_ipaddr = args.host_ip_addr
    tftp_loader.net_mode = args.board_net_mode
    if args.board_net_mode == TftpRamLoader.MODE_STATIC:
        tftp_loader.board_ipaddr = args.board_ip_addr
    tftp_loader.dryrun = args.dryrun
    return tftp_loader

def _mode_sd(args):
    _check_sudo()
    comp_installer = _get_comp_installer(args)
    sd_installer = SDCardInstaller(comp_installer)
    sd_installer.interactive = args.interactive
    sd_installer.dryrun = args.dryrun
    sd_installer.device = args.device
    sd_installer.read_partitions(args.mmap_file)
    ret = sd_installer.format()
    if ret is False: _abort_install()
    ret = sd_installer.mount_partitions(args.workdir)
    if ret is False: _abort_install()
    ret = sd_installer.install_components()
    if ret is False: _abort_install()
    ret = sd_installer.release()
    if ret is False: _abort_install()

def _mode_sd_img(args):
    _check_sudo()
    comp_installer = _get_comp_installer(args)
    sd_installer = SDCardInstaller(comp_installer)
    sd_installer.interactive = args.interactive
    sd_installer.dryrun = args.dryrun
    sd_installer.mode = sd_installer.MODE_LOOPBACK
    sd_installer.read_partitions(args.mmap_file)
    ret = sd_installer.format_loopdevice(args.image, args.imagesize_mb)
    if ret is False: _abort_install()
    ret = sd_installer.mount_partitions(args.workdir)
    if ret is False: _abort_install()
    ret = sd_installer.install_components()
    if ret is False: _abort_install()
    ret = sd_installer.release_device()
    if ret is False: _abort_install()
    
def _mode_nand(args):
    uboot = _setup_uboot(args)
    tftp_loader = _get_tftp_loader(args, uboot)
    try:
        comp_requires_network = [COMP_IPL, COMP_BOOTLOADER, COMP_KERNEL,
                             COMP_FS]
        if args.component in comp_requires_network:
            tftp_loader.setup_uboot_network()
        nand_installer = NandInstaller(uboot=uboot, loader=tftp_loader)
        if args.nand_blk_size:
            nand_installer.nand_block_size = args.nand_blk_size
        if args.nand_page_size:
            nand_installer.nand_page_size = args.nand_page_size
        nand_installer.ram_load_addr = args.ram_load_addr
        nand_installer.dryrun = args.dryrun
        nand_installer.read_partitions(args.mmap_file)
        if args.nand_uboot_file:
            ret = nand_installer.load_uboot_to_ram(args.nand_uboot_file,
                                                   args.ram_load_addr)
            if ret is False: _abort_install()
        if args.component == COMP_IPL:
            ret = nand_installer.install_ipl(force=args.ipl_force)
            if ret is False: _abort_install()
        if args.component == COMP_BOOTLOADER:
            ret = nand_installer.install_bootloader()
            if ret is False: _abort_install()
        if args.component == COMP_KERNEL:
            ret = nand_installer.install_kernel(force=args.kernel_force)
            if ret is False: _abort_install()
        if args.component == COMP_FS:
            ret = nand_installer.install_fs(force=args.fs_force)
            if ret is False: _abort_install()
        if args.component in comp_requires_network:
            if uboot.get_env('autostart') == 'no':
                uboot.set_env('autostart', 'yes')
                uboot.save_env()
        uboot.cmd('echo Installation complete', prompt_timeout=None)
    except (UbootTimeoutException, RamLoaderException) as e:
        uboot.close_comm()
        _logger.error(e)
        _abort_install()
    uboot.close_comm()

def _mode_ram(args):
    uboot = _setup_uboot(args)
    tftp_loader = _get_tftp_loader(args, uboot)
    try:
        tftp_loader.setup_uboot_network()
        _logger.info("Loading %s to RAM address %s" %
                     (args.ram_file, args.ram_load_addr))
        tftp_loader.load_file_to_ram_and_boot(args.ram_file, args.ram_load_addr,
                      args.ram_boot_line, boot_timeout=args.ram_boot_timeout)
    except (UbootTimeoutException, RamLoaderException) as e:
        uboot.close_comm()
        _logger.error(e)
        _abort_install()
    uboot.close_comm()

def _mode_env(args):
    uboot = _setup_uboot(args)
    try:
        env_installer = EnvInstaller(uboot=uboot)
        env_installer.dryrun = args.dryrun
        env_installer.install_variable(args.env_variable, args.env_value,
                                       args.env_force)
    except UbootTimeoutException as e:
        uboot.close_comm()
        _logger.error(e)
        _abort_install()
    uboot.close_comm()

def _mode_sd_script(args):
    board = BoardFactory().make(args.board)
    ext_installer = NandExternalInstaller(board=board)
    ext_installer.read_partitions(args.flash_mmap_file)
    ext_installer.install_boardinfo()
    ext_installer.install_ipl()
    ext_installer.install_bootloader()
    ext_installer.install_kernel()
    ext_installer.install_fs()
    ext_installer.write(args.template_file, args.output_file)

# ==========================================================================
# Main logic
# ==========================================================================

def main():
    signal.signal(signal.SIGINT, _sigint_handler)
    signal.signal(signal.SIGTERM, _sigint_handler)
    args = _get_args()
    _init_logging(args)
    _init_executer(args)
    _check_args(args)
    if args.mode == MODE_SD:
        _mode_sd(args)
    if args.mode == MODE_SD_IMG:
        _mode_sd_img(args)
    if args.mode == MODE_NAND:
        _mode_nand(args)
    if args.mode == MODE_RAM:
        _mode_ram(args)
    if args.mode == MODE_ENV:
        _mode_env(args)
    if args.mode == MODE_SD_SCRIPT:
        _mode_sd_script()
    _logger.info('Installation complete')
    _clean_exit(0)
    
if __name__ == '__main__':
    main()
